# Настройка среды
	sudo add-apt-repository ppa:deadsnakes/ppa #репо с последними питонами
	apt-get update && apt-get upgrade
	hostnamectl set-hostname django-server
	hostname
	nano /etc/hosts -> ???.???.???.??? django-server -> save 65.21.108.30
	adduser alexander -> set password skip other
	adduser alexander sudo
	exit #выходим
	ssh alexander@???.???.???.??? #перезаходим под новым пользователем

# Настраиваем учетку
	pwd
	mkdir -p ~/.ssh
#на локальной машине создать ключ, публичный ключ скопировать
	ssh-keygen -f base_rsa -b 4096 #на локальной машине
	scp ~/.ssh/base_rsa.pub alexander@???.???.???.???:~/.ssh/authorized_keys #на удаленной
	sudo chmod 700 ~/.ssh/
	sudo chmod 600 ~/.ssh/*
	sudo nano /etc/ssh/sshd_config -> PermitRootLogin no, PasswordAutentication no -> save
	sudo systemctl restart sshd

# Устанавливаем фаервол
	sudo apt-get install ufw
	sudo ufw default allow outgoing
	sudo ufw default deny incoming
	sudo ufw allow ssh
	sudo ufw allow 8000
	sudo ufw enable
	sudo ufw status

# Переносим проект на сервер
	scp -r django-project alexander@???.???.???.???:~/ #копируем с локали или исп git clone
	sudo apt-get install python3-pip
	sudo apt-get install python3.7
	python3 -m pip install --upgrade pip
	pip install virtualenv
	#sudo apt-get install python3-venv
	#python3 -m venv django-project/venv
	cd django-project/
	virtualenv venv
	virtualenv -p /usr/bin/python3.7 venv
	source venv/bin/activate
	pip install -r requirements.txt
	settings.py -> ALLOWED_HOSTS = ['???.???.???.???','www.???.???'] 
					STATIC_ROOT = os.path.join(BASE_DIR, 'static') 
				-> save
	python manage.py collectstatic
	python manage.py makemigrations main
	python manage.py migrate
	python manage.py runserver 0.0.0.0:8000 #только для проверки работоспособности
	sudo apt-get install apache2
	sudo apt-get install libapache2-mod-wsgi-py3
	cd /etc/apache2/sites-available
	sudo cp 000-default.conf django-project.conf
	nano django-project.conf -> Alias /static /home/alexander/django_project/static #путь к статичным файлам проекта
								<Directory /home/alexander/django-project/static>
									Require all granted
								</Directory>
								Alias /static /home/alexander/django_project/media #путь к медиа файлам проекта
								<Directory /home/alexander/django-project/media>
									Require all granted
								</Directory>
								<Directory /home/alexander/django-project/django-project>
									<Files wsgi.py>
										Require all granted
									</Files>
								</Directory>
								WSGIScriptAlias / /home/alexander/django-project/django-project/wsgi.py
								WSGIDaemonProcess django_app python-path=/home/alexander/django-project python-home=/home/alexander/django-project/venv
								WSGIProcessGroup django_app
							-> save

	cd ~
	sudo a2ensite django-project
	sudo a2dissite 000-default.conf
	/etc/apache2/apache2ctl configtest #проверить конфиг

	sudo chown :www-data django_project/db.sqlite3
	sudo chmod 664 django_project/db.sqlite3
	sudo chown :www-data django-project/
	ls -la #права доступа папки и всех вхождений
	sudo chown -R :www-data django-project/media/
	sudo chmod -R 775 django-project/media
	sudo chmod 775 django-project/
	sudo touch /etc/config.json
	sudo nano django-project/django-project/settings.py -> import json
															with open('/etc/config.json') as config_file:
																config = json.load(config_file)
															SECRET_KEY = config.get('SECRET_KEY')
															DEBUG = False
															EMAIL_HOST_USER = config.get('EMAIL_USER')
															EMAIL_HOST_PASSWORD = config.get('EMAIL_PASS')
														-> save
	sudo nano /etc/config.json -> {"SECRET_KEY": "???", #вставить секретный ключ стертый в settings.py
									"EMAIL_USER": "???",
									"EMAIL_PASS": "???"}
								-> save
	sudo ufw delete allow 8000
	sudo ufw allow http/tcp
	sudo service apache2 restart
											