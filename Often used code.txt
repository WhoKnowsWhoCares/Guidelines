
#UNIX
 #Useful directories
	/etc/systemd/system/							#Папка с описанием сервисов дл systemd
	/etc/nginx/sites-available/
 #General
	lsb_release -a 								#Узнать сборку системы
	nvidia-smi								#Инфо по ресурсам видеокарты
	ps aux | grep -i firefox 						#Поиск pid по имени
	sudo su 								#Смена пользователя на root 
	scp user@11.22.33.44:/home/user/file ~/Downloads/			#Скопировать файлы с сервера на текущ комп
	autossh -N -R 2222:localhost:22 user@server				#Создать тунель с сервера 2222 на локалхост 22
	sudo systemctl daemon-reload
	sudo systemctl enable <service>
	sudo systemctl start <service>
	ctrl+Z; bg								#Перевести процесс в фоновый режим
	fg									#Вернуть процесс из фона
 #General server config
	apt update && apt upgrade -y						#Обновить сервер
	sudo nano /etc/ssh/sshd_config						#После добавления ssh ключа
		PasswordAuthentication no
		RootLogin no
	service ssh restart
 #Generate ssh key
	ssh-keygen -t rsa 							#На рабоче машине
	eval $(ssh-agent)
	ssh-add ~/.ssh/<private_key>						#Добавим ключ агенту
	ssh-copy-id root@server_name 						#Отправим на сервер
 #Generate ssl certificate
	sudo snap install core; sudo snap refresh core
	sudo snap install --classic certbot
	sudo ln -s /snap/bin/certbot /usr/bin/certbot		#ссылка на файл
	sudo certbot --nginx
 #Wireguard
	apt install wireguard
	echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf
	sysctl -p
	cd /etc/wireguard
	wg genkey | tee /etc/wireguard/privatekey | wg pubkey | tee /etc/wireguard/publickey
	chmod 600 privatekey
	nano wg0.conf
	#Server config
		[Interface]
		PrivateKey = <server_private_key>
		ListenPort = 51830
		PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
		PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE

		[Peer]
		PublicKey = <client_public_key>
		AllowedIps = 10.0.0.2/32
	systemctl enable wg-quick@wg0.service
	systemctl start wg-quick@wg0.service
	wg genkey | tee /etc/wireguard/<name>_privatekey | wg pubkey | tee /etc/wireguard/<name>_publickey
	nano client.conf
	#Client config
		[Interface]
		PrivateKey = <client_private_key>
		Address = 10.0.0.2/32
		DNS = 1.1.1.1, 8.8.8.8
		
		[Peer]
		PublicKey = <server_public_key>
		Endpoint = <ip>:51830
		AllowedIPs = 0.0.0.0/0, ::/0
		PersistentKeepalive = 20
	system restart wg-quick@wg0.service
 #UFW
	https://help.ubuntu.com/community/UFW
	
 #TMUX
	ctr+B default prefix -> nano .tmux.conf | set-oprion -g prefix C-a #Меняем префикс на ctr+A
	tmux new-session -s <name> 						#Создать сессию
	tmux attach -t <name>							#Присоединиться
	ctr+A d									#Отсоединиться
	ctr+A c									#Новое окно
	ctr+A 0									#Перейти в 0 окно
	ctr+A "									#Разбить по горизонтали
	ctr+A %									#Разбить по вертикали
	ctr+A <-/ ->
	ctr+A h/j/k/l/o/tab 							#Навигация
	ctr+A , 								#Переименование окна
	ctr+A enter выделяем ctr+C q						#Копирование мышкой
	ctr+A [ h/j/k/l выделяем y						#Копируем
	ctr+A ]/B h/j/k/l							#Вставляем

#DJANGO
 #General
	export PATH=$PATH:/home/<user>/.python/bin 				#Добавляем путь к питону
	python -m venv env							#Настраиваем виртуальное окружение
	source ./env/bin/activate	
	pip install -U pip
	pip install django
	pip freeze > requirements.txt
 #Project mngmt
	mkdir dj_project; cd dj_project
	django-admin startproject <project_name>				#Создание проекта ($django-admin получить лист команд)
	<project_name>/manage.py startapp <app_name>				#Создание приложения
	<project_name>/manage.py startserver 0.0.0.0:8000

	python manage.py makemigrations						#Создать снимок классов для сохранения в базу
	python manage.py migrate
	# Не забыть при первом старте проинициализировать БД: python manage.py makemigrations main 
	python manage.py sqlmigrate main 0001					#Для восстановления одной из миграций указать App, version
	python manage.py shell							#Использование питона для работы с объектами проекта
	python manage.py createsuperuser					#Создание админской учетки
	pip freeze > requiremints.txt						#Сохранить список необходимых пакетов

#UNICORN
 #Settings for service
	[Unit]
	Description=gunicorn daemon
	After=network.target
	[Service]
	User=alexander
	Group=www-data
	WorkingDirectory=/home/alexander/django-site/src
	ExecStart=/home/alexander/django-site/env/bin/gunicorn 
		--workers 3 
		--bind unix:/home/alexander/django-site/gunicorn/gunicorn.sock config.wsgi:application 
		--access-logfile /home/alexander/django-site/gunicorn/access.log 
		--error-logfile /home/alexander/django-site/gunicorn/error.log
	Restart=on-failure
	[Install]
	WantedBy=multi-user.target
 #Set systemd
	sudo systemctl daemon-reload
	sudo systemctl start gunicorn
	sudo systemctl enable gunicorn

#NGINX
 #Useful links
	https://adamtheautomator.com/nginx-subdomain/
 #Site config
	sudo ln -s /etc/nginx/sites-available/site.conf /etc/nginx/sites-enabled/
	add to /etc/nginx/sites-available/site.conf :
	server {
		listen 80;
		server_name domain;

		location /static/ {
			root /home/alexander/django-site/static;
		}
		location / {
			include proxy_params;
			proxy_pass http://unix:/home/alexander/django-site/gunicorn/gunicorn.sock;
		}
	}
	server{
		listen 80;
		server_name www.domain;
		return 301 https://domain$request_uri;
	}
	sudo nginx -t
	sudo service nginx restart

#Jupyter
	

#GIT
 #General
	git config --global user.name "Alexander"
	git config --global user.email "as.frantsev@gmail.com"
	git config pull.rebase true
 #Имеем репозиторий
	git init
	git remote add origin git@github.com:<user>/<repository>.git
	git add .
	git commit -m 'initial commit'
	git push -u origin main
 #Копируем из 
	fit clone git@github.com:<user>/<repository>.git
	git rm <file_name>
	git tag -a <tag_name> -m '<description>' 	#тэгируем коммит
	git reflog 								# история изменений
	git show <commit_sha>							# посмотреть коммит
	git restore <file_name> (--staged)					# вернуть изменения (если уже в индексе)
	git diff (--staged)							# сравнение с последним коммитом
	git checkout master							# переключение на ветку master
	git fetch branch1							# обновить инфо по ветке branch1
	git merge branch1							# к текущей ветке примерджить ветку branch1
	git branch -d branch1							# удалить branch1
	git rebase
 #Стратегии ветвления
   #Git Flow
	Ключевая ветка main, develop рабочая ветка, от которой отпочковываются ветки feature и release
	После тестирования release она сливается в master. От master может создаваться hotfix
	Удобна: Надежная удобная система для редких релизов, можно поддерживать несколько версий.
	Неудобна: Для частого CI/CD, сложный merge крупных фичей
   #GitHub Flow
	Есть одна ветка main, от которой отпочковываются feature, 
	При сливании обновляем ветку из master, происходит тестирование, deploy pre-prod, мониторинг, слив в master
   #GitLab Flow
	Похоже на GitHub, но есть отдельная ветка production в которую сливают из master
 #Версионирование
	#SemVer
	breaking.feature.fix(major.minor.patch) breaking-несовместимость в изменениях, feature-совместимая функциональность
	#PEP440
	major.minor.micro
	
#DVC
	dvc init								#инициализация в проекте
	commit dvc init								#коммит в dvc
	git commit -m "initialize dvc"						#коммит в git
	dvc add data/<filename.csv>						#добавить файл в отслеживаемые
	dvc run -f <dvc_script_name>.dvc \
			-d <dependencie_name> \
			-o <output_name> \
			-m <metrics_file_name> \
			python <py_script_name>.py
	dvc metrics show							#показывает метрики из файла <metrics_file_name>
	dvc plots show
	dvc remote add -d <name> <url_path>					#добавить удаленное хранилище
	dvc push / pull								#загрузить/скачать из удаленного репозитория
	git checkout <tag>							#переключиться на гит
	dvc checkout 								#скачать файлы нужной ветки гита
	dvc repro								#воспроизвести пайплайн

#DOCKER

#Poetry
	poetry config virtualenvs.in-project true
	cat requirements.txt | xargs poetry add					#загрузить зависимости из requirements.txt
	poetry init								#инициализация нового проекта
	poetry env use <path_to_python>
	poetry install 								#установка зависимостей
	poetry update								#обновление зависимостей
	poetry show --tree 
	poetry show --latest
	poetry build								#собрать наш пакет
	poetry publish								#публикация на pypi
	poetry run python <file_name>
	poetry add (--dev) <package_name>					#установка пакета (только dev)
	poetry lock								#фиксация зависимостей для прода
	
